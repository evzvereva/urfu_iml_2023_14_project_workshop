import io
import logging

from aiogram import Router
from aiogram import types
from aiogram.types import BufferedInputFile
from aiogram.filters import Command

from config import load_config
from history import SimpleMessageHistory
from gpt_connect import question_processing
from history import UserState
from speechkit_connect import conv_voice_to_text
from speechkit_connect import conv_text_to_voice

LINK_ABOUT = 'https://urfu-iml-2023-14-project-workshop.streamlit.app/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0'
LINK_HELP = 'https://urfu-iml-2023-14-project-workshop.streamlit.app/%D0%9F%D0%BE%D0%BC%D0%BE%D1%89%D1%8C'

bot_router = Router()
logger = logging.getLogger(__name__)
config = load_config()
user_state = UserState()


@bot_router.message(Command("start"))
async def handle_cmd_start(msg: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Start –¢–ì –±–æ—Ç–∞
    """
    logger.log(level=logging.INFO,
               msg=f' --> –ú—ã –∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å {msg.from_user.full_name} '
                   f'({msg.from_user.id})')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state.init_user(msg.from_user.id, msg.from_user.full_name)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await msg.answer(f'{msg.from_user.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
                     f'–Ø —É–º–Ω—ã–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –≥–∏–¥ –ø–æ –≥–æ—Ä–æ–¥—É –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É '
                     f'–∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ '
                     f'–≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö, '
                     f'–º–µ—Å—Ç–∞—Ö –æ—Ç–¥—ã—Ö–∞ –∏ –ø–∏—Ç–∞–Ω–∏—è –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ.\n\n'
                     f'–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')


@bot_router.message(Command("help"))
async def handle_cmd_help(msg: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Help –¢–ì –±–æ—Ç–∞
    """
    logger.log(level=logging.INFO,
               msg=f' --> –°–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç {msg.from_user.full_name} '
                   f'({msg.from_user.id})')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state.init_user(msg.from_user.id, msg.from_user.full_name)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await msg.answer(f'–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ '
                     f'<a href="{LINK_HELP}">—Å–∞–π—Ç–µ</a> –ø—Ä–æ–µ–∫—Ç–∞')


@bot_router.message(Command("about"))
async def handle_cmd_about(msg: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã About –¢–ì –±–æ—Ç–∞
    """
    logger.log(level=logging.INFO,
               msg=f' --> –û –Ω–∞—Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç {msg.from_user.full_name} '
                   f'({msg.from_user.id})')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state.init_user(msg.from_user.id, msg.from_user.full_name)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await msg.answer(f'–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ '
                     f'<a href="{LINK_ABOUT}">—Å–∞–π—Ç–µ</a> –ø—Ä–æ–µ–∫—Ç–∞')


@bot_router.message(Command("voice_out"))
async def handle_cmd_about(msg: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –¢–ì –±–æ—Ç–∞
    """
    logger.log(level=logging.INFO,
               msg=f' --> {msg.from_user.full_name} '
                   f'({msg.from_user.id}) –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≥–æ–ª–æ—Å')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    user_state.init_user(msg.from_user.id, msg.from_user.full_name)
    result = user_state.toogle_user_voice_out(msg.from_user.id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if result:
        await msg.answer(f'–†–µ–∂–∏–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω')
    else:
        await msg.answer(f'–†–µ–∂–∏–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω')


@bot_router.message(Command("clear"))
async def handle_cmd_about(msg: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¢–ì –±–æ—Ç–∞
    """
    logger.log(level=logging.INFO,
               msg=f' --> {msg.from_user.full_name} '
                   f'({msg.from_user.id}) —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    user_state.init_user(msg.from_user.id, msg.from_user.full_name)
    user_state.clear_history(msg.from_user.id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await msg.answer(f'–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòÄ')


@bot_router.message()
async def handle_voice_message(msg: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.log(level=logging.INFO,
               msg=f' --> –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç '
                   f'{msg.from_user.full_name} '
                   f'({msg.from_user.id})')
    logger.log(level=logging.INFO,
               msg=f' ----> Content Type - {msg.content_type}')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state.init_user(msg.from_user.id, msg.from_user.full_name)

    # –ï—Å–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å,
    # —Ç–æ –≤–µ—Ä–Ω–µ–º –æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if msg.content_type != types.ContentType.TEXT \
            and msg.content_type != types.ContentType.VOICE:
        await msg.answer(f'–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ {msg.content_type}')
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä—É—é –º—ã –Ω–µ –∑–Ω–∞–µ–º,
    # —Ç–æ –≤–µ—Ä–Ω–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if msg.text and msg.text[0] == '/':
        logger.log(level=logging.INFO,
                   msg=f' --> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.full_name} '
                       f'({msg.from_user.id}) –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É '
                       f'{msg.text}')
        await msg.answer(f'–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É {msg.text}')
        return

    question: str = msg.text
    answer: str = ''

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –µ–≥–æ –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç
    if msg.content_type == types.ContentType.VOICE:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≥–æ–ª–æ—Å–∞
            file_path = (await msg.bot.get_file(msg.voice.file_id)).file_path
            voice_ogg = io.BytesIO()
            await msg.bot.download_file(file_path, voice_ogg)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç
            question = await conv_voice_to_text(voice_ogg.getbuffer().tobytes(), msg.voice.duration)
        except Exception as e:
            await msg.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}')
            return

    logger.log(level=logging.INFO,
               msg=f' ----> {question}')

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT –º–æ–¥–µ–ª–∏
        answer = await question_processing(msg.from_user.id,
                                           question,
                                           user_state.get_history(msg.from_user.id))
    except Exception as e:
        await msg.answer(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞: {e}')
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_state.add_history(msg.from_user.id, SimpleMessageHistory(
        role='user',
        message='question'))
    user_state.add_history(msg.from_user.id, SimpleMessageHistory(
        role='assistant',
        message='answer'))

    try:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–æ–∏—Ç —Ä–µ–∂–∏–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞,  
        # —Ç–æ –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å
        if user_state.get_user_voice_out(msg.from_user.id):
            await msg.bot.send_voice(
                chat_id=msg.chat.id,
                voice=BufferedInputFile(
                    await conv_text_to_voice(answer),
                    filename='–û—Ç–≤–µ—Ç.ogg'))
            return
    except Exception as e:
        await msg.answer(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞: {e}')
        await msg.answer(answer)
        return

    await msg.answer(answer)
